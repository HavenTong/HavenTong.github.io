[{"content":"STL容器共性 STL容器所提供的都是值寓意，而非引用寓意，也就是说当我们向容器插入元素的时候，容器内部实施了拷贝动作，将我们要插入的元素再另行拷贝一份放入到容器中，也就是说我们提供的元素必须能够拷贝。\n 若有指针，需要写拷贝构造，重载等号\n  除了queue和stack之外，每个容器都提供可返回迭代器的函数，运用返回的迭代器就可以访问元素。 通常STL不会抛出异常，需要使用者传入正确参数。 每个容器都提供了一个默认的构造函数和默认的拷贝构造函数。 大小相关的构造方法：  size()返回容器中元素的个数 empty()判断元素是否为空    STL容器使用时机     vector deque list set multiset map multimap     典型内存结构 单端数组 双端数组 双向链表 二叉树 二叉树 二叉树 二叉树   可随机存取 是 是 否 否 否 对key而言，是 否   元素搜寻速度 慢 慢 非常慢 快 快 对key而言，快 对key而言，快   元素安插移除 尾端 头尾两端 任何位置 - - - -    使用场景 vector 软件历史操作数据的存储，经常查看历史记录，但不会删除记录。\ndeque 排队购票系统，排队者的存储可以采用deque，支持头部快速移除，尾端快速添加。如果采用vector，头部移除会移动大量数据，速度慢。\nvector v.s. deque  vector.at()比deque.at()效率高：vector.at(0)是固定的，deque的开始位置是不固定的 如果有大量释放操作时，vector花的时间更少 deque支持头部的快速插入与移除  list 公交车乘客的存储，随时可能有乘客下车，支持频繁的不确定位置元素的移除和插入\nset 对手机游戏的个人得分纪录的存储，存储要求从高分到低分的顺序排列\nmap 按ID号存储十万个用户，想要快速通过ID查找对应的用户。利用二叉树的查找效率。\n","permalink":"https://haventong.github.io/post/stl%E7%AC%94%E8%AE%B0/","summary":"STL容器共性 STL容器所提供的都是值寓意，而非引用寓意，也就是说当我们向容器插入元素的时候，容器内部实施了拷贝动作，将我们要插入的元素再另","title":"STL笔记"},{"content":"Header 1 🌠 这是第二篇博客。\n测试是否可以使用\n","permalink":"https://haventong.github.io/post/my-second-post/","summary":"Header 1 🌠 这是第二篇博客。 测试是否可以使用","title":"My Second Post"},{"content":"Header 1 ✌️ 测试中文是否可用\nThis is my first post.\nTest inline code print(\u0026quot;hello world\u0026quot;)\n下面主要介绍模型定义 $\\mathcal{G} = (\\mathcal{V},\\mathcal{E},\\mathcal{R})$ $$ \\tilde{X} = {x_1, x_2, \u0026hellip;, x_3} $$\n$$ E = mc^2 $$\n1 2 3 4 5 6  # include\u0026lt;iostream\u0026gt; # include\u0026lt;cstdio\u0026gt;  int main() { printf(\u0026#34;Hello world\\n\u0026#34;); }   Header 2 🧑‍🚀 this is header 2\nHeader 3 🎇 This is header 3.\n","permalink":"https://haventong.github.io/post/my-first-post/","summary":"Header 1 ✌️ 测试中文是否可用 This is my first post. Test inline code print(\u0026quot;hello world\u0026quot;) 下面主要介绍模型定义 $\\mathcal{G} = (\\mathcal{V},\\mathcal{E},\\mathcal{R})$ $$ \\tilde{X} = {x_1, x_2, \u0026hellip;, x_3} $$ $$ E = mc^2 $$ 1 2 3 4 5 6 # include\u0026lt;iostream\u0026gt; # include\u0026lt;cstdio\u0026gt; int main() { printf(\u0026#34;Hello world\\n\u0026#34;); } Header 2 🧑‍🚀 this","title":"My First Post"}]