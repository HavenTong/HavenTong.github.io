<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hanwen Tong</title>
    <link>https://haventong.github.io/</link>
    <description>Recent content on Hanwen Tong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Mar 2022 10:51:35 +0800</lastBuildDate><atom:link href="https://haventong.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Latex中插入代码</title>
      <link>https://haventong.github.io/post/latex%E4%B8%AD%E6%8F%92%E5%85%A5%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Fri, 18 Mar 2022 10:51:35 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/latex%E4%B8%AD%E6%8F%92%E5%85%A5%E4%BB%A3%E7%A0%81/</guid>
      <description>minted是一个可以在LaTex中插入代码的包，可以通过以下方式使用： 配置 1 2 3 4 5 6 7 8 9 10 11 12 \usepackage{xcolor} \usepackage{minted} \definecolor{bg}{rgb}{0.95,0.95,0.95} \setminted{ frame=lines, tabsize=4, encoding=utf8, bgcolor=bg, fontsize=\footnotesize, linenos, breaklines, } 使用 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>First Ak</title>
      <link>https://haventong.github.io/post/first-ak/</link>
      <pubDate>Fri, 18 Mar 2022 10:50:04 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/first-ak/</guid>
      <description>纪念一下人生第一次AK: 后续题解会尽快补充</description>
    </item>
    
    <item>
      <title>Topological Sort</title>
      <link>https://haventong.github.io/post/topological-sort/</link>
      <pubDate>Fri, 18 Mar 2022 10:47:39 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/topological-sort/</guid>
      <description>拓扑排序 近日实现了一下拓扑排序，在这里记录一下拓扑排序的思想，并附上一个具体的题目 这里使用bfs实现 思想 对一个有向无环图(DAG-Direc</description>
    </item>
    
    <item>
      <title>Java Map</title>
      <link>https://haventong.github.io/post/java-map/</link>
      <pubDate>Fri, 18 Mar 2022 10:44:14 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/java-map/</guid>
      <description>受到上篇C++ STL中map的排序方式的启发，这次又来探究一下Java中对于map的不同排序方式 依然分为两种排序 Sort By Key Sort By Value 打印map 打印m</description>
    </item>
    
    <item>
      <title>STL Map</title>
      <link>https://haventong.github.io/post/stl-map/</link>
      <pubDate>Fri, 18 Mar 2022 10:39:55 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/stl-map/</guid>
      <description>近日做题用到了C++中STL的map容器，在涉及map的排序过程时，通常有两种方式进行排序 Sort by key Sort by value 为了加深这两种排序方式的写法，我又写了</description>
    </item>
    
    <item>
      <title>Machine Learning Concept</title>
      <link>https://haventong.github.io/post/machine-learning-concept/</link>
      <pubDate>Fri, 18 Mar 2022 10:12:56 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/machine-learning-concept/</guid>
      <description>1. 数据 大写字母表示举证，大写字母表示向量 数据整体叫数据集(data set) 每一行数据称为一个样本(sample) 每一个字段表达样本的一个特征(fe</description>
    </item>
    
    <item>
      <title>validation-api</title>
      <link>https://haventong.github.io/post/validation-api/</link>
      <pubDate>Fri, 18 Mar 2022 10:09:40 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/validation-api/</guid>
      <description>JSR303/JSR-349，hibernate validator，spring validation之间的关系 JSR303是一项标准,JSR</description>
    </item>
    
    <item>
      <title>SpringBoot为静态方法打桩</title>
      <link>https://haventong.github.io/post/springboot%E4%B8%BA%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E6%89%93%E6%A1%A9/</link>
      <pubDate>Fri, 18 Mar 2022 10:05:43 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/springboot%E4%B8%BA%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E6%89%93%E6%A1%A9/</guid>
      <description>Spring Boot对静态方法进行打桩 问题 在对Spring Boot项目进行测试的时候，会对业务逻辑service层进行测试。而service层的代码可</description>
    </item>
    
    <item>
      <title>redis基本配置及开关</title>
      <link>https://haventong.github.io/post/redis%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%BC%80%E5%85%B3/</link>
      <pubDate>Fri, 18 Mar 2022 10:02:55 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/redis%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%BC%80%E5%85%B3/</guid>
      <description>配置redis服务端 允许远程访问 注释掉 bind 127.0.0.1 以守护进程运行 将daemonize no 改为 daemonize yes Java 连接redis必须设置密码： requirepass &amp;lt;password&amp;gt; 查看redis是否在</description>
    </item>
    
    <item>
      <title>redis.conf</title>
      <link>https://haventong.github.io/post/redis-conf/</link>
      <pubDate>Fri, 18 Mar 2022 09:58:47 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/redis-conf/</guid>
      <description>绑定的主机地址 1 bind 127.0.0.1 如果需要远程访问，则需要注释掉 守护进程 1 daemonize no Redis默认以非守护进程运行，如果想要改为守护进程，则设置为yes pidfile 1 pidfile /var/run/redis_6379.pid</description>
    </item>
    
    <item>
      <title>Serializable接口</title>
      <link>https://haventong.github.io/post/serializable%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Fri, 18 Mar 2022 09:53:17 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/serializable%E6%8E%A5%E5%8F%A3/</guid>
      <description>Serializable接口概述 Serializable是java.io包中定义的、用于实现Java类的序列化操作而提供的一个语义级别的接口</description>
    </item>
    
    <item>
      <title>SpringBoot CORS</title>
      <link>https://haventong.github.io/post/springboot-cors/</link>
      <pubDate>Fri, 18 Mar 2022 09:35:57 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/springboot-cors/</guid>
      <description>Spring Boot-CORS 什么是跨域？ 定义：浏览器从一个域名的网页取请求另一个域名下的东西。通俗点说，浏览器直接从A域访问B域中的资源是不被允许的，如果想要访问，</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Priority Queue</title>
      <link>https://haventong.github.io/post/c&#43;&#43;-priority-queue/</link>
      <pubDate>Fri, 18 Mar 2022 00:43:24 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/c&#43;&#43;-priority-queue/</guid>
      <description>C++-priority_queue C++ STL-priority_queue 用法 priority_queue存在于头文件&amp;lt;queue&amp;gt;中，以下代码解释了该容器如何使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>SpringBoot MyBatis</title>
      <link>https://haventong.github.io/post/springboot-mybatis/</link>
      <pubDate>Fri, 18 Mar 2022 00:39:52 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/springboot-mybatis/</guid>
      <description>Spring Boot-Mybatis 1. ORM框架选型 对比项 SPRING DATA JPA MYBATIS 单表操作方式 只需继承，代码量较少，非常方便。而且支持方法名用关键字生成SQL 可以使用代码生成工具，也很方便</description>
    </item>
    
    <item>
      <title>SpringBoot JDBC</title>
      <link>https://haventong.github.io/post/springboot-jdbc/</link>
      <pubDate>Fri, 18 Mar 2022 00:34:51 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/springboot-jdbc/</guid>
      <description>Spring Boot &amp;amp; JDBC 1. Spring Boot整合JDBC操作数据库 JDBC操作数据库流程 加载数据库驱动 建立数据库连接 创建数据库操作对象 定义操作的SQL语句 执行数据库</description>
    </item>
    
    <item>
      <title>SpringBoot Bean自动装配</title>
      <link>https://haventong.github.io/post/springboot-bean%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</link>
      <pubDate>Thu, 17 Mar 2022 23:40:18 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/springboot-bean%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</guid>
      <description>Spring Boot Bean自动装配 1. 全局配置文件 修改Spring Boot自动配置的默认值，Spring Boot在底层自动加载 application.yml application.properties 2. Bean自动装配原理 (1) Spring</description>
    </item>
    
    <item>
      <title>SpringBoot Restful接口</title>
      <link>https://haventong.github.io/post/springboot-restful%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Thu, 17 Mar 2022 22:41:09 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/springboot-restful%E6%8E%A5%E5%8F%A3/</guid>
      <description>SpringBoot RESTful接口 1.常用注解开发RESTful接口 @RestController 将注解的类注入到Spring的环境 相当于@Controller + @ResponseBody JSON格式的数据</description>
    </item>
    
    <item>
      <title>SpringBoot IDEA工具</title>
      <link>https://haventong.github.io/post/springboot-idea%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Thu, 17 Mar 2022 21:15:56 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/springboot-idea%E5%B7%A5%E5%85%B7/</guid>
      <description>SpringBoot with IDEA 插件 lombok IDEA中下载后 在pom.xml文件中引入依赖 1 2 3 4 5 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; 常用注解 1 2 3 4 5 @Builder @Data @AllArgsConstructor @NoArgsConstructor ... GsonFormat 可以快速的将JSON转换为实体类</description>
    </item>
    
    <item>
      <title>MongoDB基础</title>
      <link>https://haventong.github.io/post/mongodb%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 17 Mar 2022 21:10:14 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/mongodb%E5%9F%BA%E7%A1%80/</guid>
      <description>MongoDB基础 1 2 3 brew services start mongodb-community@4.2 brew services stop mongodb-community@4.2 1. 基本概念 集合 集合类似于数组，在集合中可以存放文档 文档 文档是文档数据库的最小单元，我们操作和存储的内</description>
    </item>
    
    <item>
      <title>SpringBoot配置</title>
      <link>https://haventong.github.io/post/springboot%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 17 Mar 2022 21:04:21 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/springboot%E9%85%8D%E7%BD%AE/</guid>
      <description>Spring Boot配置 1. 标记语言 以前的配置文件：xxx.xml YAML: 以数据为中心，比json, xml更适合作配置文件，实例如下 1 2 server:port:8081 XML: 1 2 3 &amp;lt;server&amp;gt; &amp;lt;port&amp;gt;8081&amp;lt;/port&amp;gt; &amp;lt;/server&amp;gt; 2. YA</description>
    </item>
    
    <item>
      <title>SpringBoot新建项目</title>
      <link>https://haventong.github.io/post/springboot%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Thu, 17 Mar 2022 20:22:31 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/springboot%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE/</guid>
      <description>SpringBoot HelloWorld 一个功能： 浏览器发送一个hello请求，浏览器接受请求并处理，响应hello字符串 1. 创建一个maven工程(jar) 2. 导入SpringB</description>
    </item>
    
    <item>
      <title>STL笔记</title>
      <link>https://haventong.github.io/post/stl%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 17 Mar 2022 20:00:10 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/stl%E7%AC%94%E8%AE%B0/</guid>
      <description>STL容器共性 STL容器所提供的都是值寓意，而非引用寓意，也就是说当我们向容器插入元素的时候，容器内部实施了拷贝动作，将我们要插入的元素再另</description>
    </item>
    
    <item>
      <title>My Second Post</title>
      <link>https://haventong.github.io/post/my-second-post/</link>
      <pubDate>Thu, 17 Mar 2022 12:01:21 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/my-second-post/</guid>
      <description>Header 1 🌠 这是第二篇博客。 测试是否可以使用</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://haventong.github.io/post/my-first-post/</link>
      <pubDate>Thu, 17 Mar 2022 10:29:17 +0800</pubDate>
      
      <guid>https://haventong.github.io/post/my-first-post/</guid>
      <description>Header 1 ✌️ 测试中文是否可用 This is my first post. Test inline code print(&amp;quot;hello world&amp;quot;) 下面主要介绍模型定义 $\mathcal{G} = (\mathcal{V},\mathcal{E},\mathcal{R})$ $$ \tilde{X} = {x_1, x_2, &amp;hellip;, x_3} $$ $$ E = mc^2 $$ 1 2 3 4 5 6 # include&amp;lt;iostream&amp;gt; # include&amp;lt;cstdio&amp;gt; int main() { printf(&amp;#34;Hello world\n&amp;#34;); } Header 2 🧑‍🚀 this</description>
    </item>
    
    
    
  </channel>
</rss>
